def id : (a : Type) -> a -> a =
    fn a => fn x => x;


def const : (a : id Type Type) -> (b : Type) -> a -> b -> a =
    fn a => fn b => fn x => fn y => x;


def constagain : (a : Type) -> (b : Type) -> a -> b -> a =
    fn a => fn b => fn x => fn y => id a x;


def constswitch : (a : Type) -> a -> (b : Type) -> b -> a =
    fn a => fn x => fn b => fn y => x;


def add : Int32 -> Int32 -> Int32 =
    fn x => fn y => x;


def Nat : Type =
    Int32;


def n : Int32 =
    4;


postulate T : Type;
postulate A : T;
postulate B : T;

postulate List : Type -> Type;
postulate Nil : (a : Type) -> List a;
postulate Cons : (a : Type) -> a -> List a -> List a;

postulate map : (T -> T) -> List T -> List T;

def xs : List T = Cons T A (Nil T);

def ys : List T = map (id T) xs;
